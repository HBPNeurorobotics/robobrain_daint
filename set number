[1mdiff --git a/nrp_experiment/robobrain_mouse_exp/resources/stim_all_model.py b/nrp_experiment/robobrain_mouse_exp/resources/stim_all_model.py[m
[1mindex b19be4e..3417f3e 100755[m
[1m--- a/nrp_experiment/robobrain_mouse_exp/resources/stim_all_model.py[m
[1m+++ b/nrp_experiment/robobrain_mouse_exp/resources/stim_all_model.py[m
[36m@@ -96,33 +96,33 @@[m [mdef main():[m
                                                                              # {'layers': ctx_layers, 'params': ctx_params},[m
                                                                              'M2': None},[m
                                                                  scalefactor=sim_params['scalefactor'])[m
[31m-    with open('./log/' + 'performance.txt', 'a') as file:[m
[32m+[m[32m    with open('/opt/data/log/' + 'performance.txt', 'a') as file:[m
         file.write('Network_Building_Time ' + str(time.time() - start_time) + '\n')[m
         # 3) interconnect regions[m
     start_time = time.time()[m
[31m-    if sim_regions['S1'] and sim_regions['M1']:[m
[31m-        pass[m
[31m-        # _ = nest_routine.connect_region_ctx_cb(ctx_layers['S1_L5B_Pyr'], cb_layers_S1['CB_S1_layer_pons'], 'S1')[m
[31m-    if sim_regions['S1'] and sim_regions['CB_S1']:[m
[31m-        _ = nest_routine.connect_region_ctx_cb(ctx_layers['S1_L5B_Pyr'], cb_layers_S1['CB_S1_layer_pons'], 'S1')[m
[31m-    if sim_regions['M1'] and sim_regions['CB_M1']:[m
[31m-        _ = nest_routine.connect_region_ctx_cb(ctx_M1_layers['M1_L5B_PT'], cb_layers_M1['CB_M1_layer_pons'], 'M1')[m
[31m-    if sim_regions['S1'] and sim_regions['TH_S1']:[m
[31m-        _ = nest_routine.connect_region_ctx_th(ctx_layers, th_layers, 'S1')[m
[31m-    if sim_regions['M1'] and sim_regions['TH_M1']:[m
[31m-        _ = nest_routine.connect_region_ctx_th(ctx_M1_layers, th_layers, 'M1')[m
[31m-    if sim_regions['TH_S1'] and sim_regions['S1']:[m
[31m-        _ = nest_routine.connect_region_th_ctx(th_layers, ctx_layers, 'S1')[m
[31m-    if sim_regions['TH_M1'] and sim_regions['M1']:[m
[31m-        _ = nest_routine.connect_region_th_ctx(th_layers, ctx_M1_layers, 'M1')[m
[31m-    if sim_regions['CB_S1'] and sim_regions['S1']:[m
[31m-        _ = nest_routine.connect_region_cb_th(cb_layers_S1, th_layers, 'S1')[m
[31m-    if sim_regions['CB_M1'] and sim_regions['M1']:[m
[31m-        _ = nest_routine.connect_region_cb_th(cb_layers_M1, th_layers, 'M1')[m
[31m-    if sim_regions['BG'] and sim_regions['TH_M1']:[m
[31m-        _ = nest_routine.connect_region_bg_th(bg_layers, th_layers)[m
[31m-    with open('./log/' + 'performance.txt', 'a') as file:[m
[31m-        file.write('Interconnect_Regions_Time ' + str(time.time() - start_time) + '\n')[m
[32m+[m[32m    # BFFFFFFFFFF if sim_regions['S1'] and sim_regions['M1']:[m
[32m+[m[32m    #     pass[m
[32m+[m[32m    #     # _ = nest_routine.connect_region_ctx_cb(ctx_layers['S1_L5B_Pyr'], cb_layers_S1['CB_S1_layer_pons'], 'S1')[m
[32m+[m[32m    # if sim_regions['S1'] and sim_regions['CB_S1']:[m
[32m+[m[32m    #     _ = nest_routine.connect_region_ctx_cb(ctx_layers['S1_L5B_Pyr'], cb_layers_S1['CB_S1_layer_pons'], 'S1')[m
[32m+[m[32m    # if sim_regions['M1'] and sim_regions['CB_M1']:[m
[32m+[m[32m    #     _ = nest_routine.connect_region_ctx_cb(ctx_M1_layers['M1_L5B_PT'], cb_layers_M1['CB_M1_layer_pons'], 'M1')[m
[32m+[m[32m    # if sim_regions['S1'] and sim_regions['TH_S1']:[m
[32m+[m[32m    #     _ = nest_routine.connect_region_ctx_th(ctx_layers, th_layers, 'S1')[m
[32m+[m[32m    # if sim_regions['M1'] and sim_regions['TH_M1']:[m
[32m+[m[32m    #     _ = nest_routine.connect_region_ctx_th(ctx_M1_layers, th_layers, 'M1')[m
[32m+[m[32m    # if sim_regions['TH_S1'] and sim_regions['S1']:[m
[32m+[m[32m    #     _ = nest_routine.connect_region_th_ctx(th_layers, ctx_layers, 'S1')[m
[32m+[m[32m    # if sim_regions['TH_M1'] and sim_regions['M1']:[m
[32m+[m[32m    #     _ = nest_routine.connect_region_th_ctx(th_layers, ctx_M1_layers, 'M1')[m
[32m+[m[32m    # if sim_regions['CB_S1'] and sim_regions['S1']:[m
[32m+[m[32m    #     _ = nest_routine.connect_region_cb_th(cb_layers_S1, th_layers, 'S1')[m
[32m+[m[32m    # if sim_regions['CB_M1'] and sim_regions['M1']:[m
[32m+[m[32m    #     _ = nest_routine.connect_region_cb_th(cb_layers_M1, th_layers, 'M1')[m
[32m+[m[32m    # if sim_regions['BG'] and sim_regions['TH_M1']:[m
[32m+[m[32m    #     _ = nest_routine.connect_region_bg_th(bg_layers, th_layers)[m
[32m+[m[32m    # with open('/opt/data/log/' + 'performance.txt', 'a') as file:[m
[32m+[m[32m    #     file.write('Interconnect_Regions_Time ' + str(time.time() - start_time) + '\n')[m
 [m
     # 2.5) detectors[m
 [m
[36m@@ -167,7 +167,7 @@[m [mdef main():[m
         start_time = time.time()[m
         print('Simulation Started:', start_time)[m
         # BF nest.Simulate(simulation_time)[m
[31m-        with open('./log/' + 'performance.txt', 'a') as file:[m
[32m+[m[32m        with open('/opt/data/log/' + 'performance.txt', 'a') as file:[m
             file.write('Simulation_Elapse_Time ' + str(time.time() - start_time) + '\n')[m
         print('Simulation Finish')[m
 [m
[36m@@ -177,6 +177,7 @@[m [mdef main():[m
                     bg_layers[layer_name]))  # nest_routine.count_layer(bg_layers[layer_name]))[m
                 print('Layer ' + layer_name + " fires at " + str(rate) + " Hz")[m
 [m
[32m+[m
         # if sim_regions['BG']:[m
         #    for layer_name in bg_layers.keys():[m
         #        rate = nest_routine.get_firing_rate_from_gdf_files(layer_name, detectors[layer_name], sim_params['simDuration'],[m
[36m@@ -369,7 +370,7 @@[m [mdef main():[m
         # 5) Check if File exists to run simulation, if it doesn't exists wait some time and then check again.[m
         trials_nb = sim_params['sim_model'][sim_model_on]['trials_nb'][m
         trial_counter = 0[m
[31m-        # file_path = './log/LCR.txt'[m
[32m+[m[32m        # file_path = '/opt/data/log/LCR.txt'[m
 [m
         total_sim_time = sim_params['sim_model'][sim_model_on]['delta_t'] * trials_nb[m
         senders, spiketimes = [], [][m
[36m@@ -666,7 +667,7 @@[m [mdef main():[m
         print('Simulation Started:')[m
         start_time = time.time()[m
         nest.Simulate(simulation_time)[m
[31m-        with open('./log/' + 'performance.txt', 'a') as file:[m
[32m+[m[32m        with open('/opt/data/log/' + 'performance.txt', 'a') as file:[m
             file.write('Simulation_Elapse_Time ' + str(time.time() - start_time) + '\n')[m
         print('Simulation Finish')[m
 [m
[36m@@ -693,7 +694,7 @@[m [mdef main():[m
         print('Simulation Started:')[m
         start_time = time.time()[m
         nest.Simulate(simulation_time)[m
[31m-        with open('./log/' + 'performance.txt', 'a') as file:[m
[32m+[m[32m        with open('/opt/data/log/' + 'performance.txt', 'a') as file:[m
             file.write('Simulation_Elapse_Time ' + str(time.time() - start_time) + '\n')[m
         print('Simulation Finish')[m
 [m
[36m@@ -707,7 +708,7 @@[m [mdef main():[m
         print('Simulation Started:')[m
         start_time = time.time()[m
         nest.Simulate(simulation_time)[m
[31m-        with open('./log/' + 'performance.txt', 'a') as file:[m
[32m+[m[32m        with open('/opt/data/log/' + 'performance.txt', 'a') as file:[m
             file.write('Simulation_Elapse_Time ' + str(time.time() - start_time) + '\n')[m
         print('Simulation Finish')[m
 [m
[36m@@ -725,7 +726,7 @@[m [mdef main():[m
         print('Simulation Started:')[m
         start_time = time.time()[m
         nest.Simulate(simulation_time)[m
[31m-        with open('./log/' + 'performance.txt', 'a') as file:[m
[32m+[m[32m        with open('/opt/data/log/' + 'performance.txt', 'a') as file:[m
             file.write('Simulation_Elapse_Time ' + str(time.time() - start_time) + '\n')[m
         print('Simulation Finish')[m
 [m
[36m@@ -747,7 +748,7 @@[m [mdef main():[m
         print('Simulation Started:')[m
         start_time = time.time()[m
         nest.Simulate(simulation_time)[m
[31m-        with open('./log/' + 'performance.txt', 'a') as file:[m
[32m+[m[32m        with open('/opt/data/log/' + 'performance.txt', 'a') as file:[m
             file.write('Simulation_Elapse_Time ' + str(time.time() - start_time) + '\n')[m
         print('Simulation Finish')[m
         if sim_regions['TH_S1']:[m
[36m@@ -775,6 +776,9 @@[m [mdef main():[m
         print('wrong model set')[m
 [m
 [m
[32m+[m[32m    return ctx_M1_layers[m
[32m+[m
[32m+[m
 if __name__ == '__main__':[m
     main()[m
 [m
